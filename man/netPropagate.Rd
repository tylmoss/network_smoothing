% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netPropagate.R
\name{netPropagate}
\alias{netPropagate}
\title{FUNCTION Propagate information across an interaction network}
\usage{
netPropagate(mutData, adj.mat, alpha = 0.7, verbose = F,
  include.input = F)
}
\arguments{
\item{mutData}{The mutation data in vector or matrix format. Samples 
in rows and features/genes in columns}

\item{adj.mat}{The network information represented as an adjaceny matrix.}

\item{alpha}{Weight (0 to 1) given to interaction data.}

\item{verbose}{Decide whether or not print individual step results to console.}

\item{include.input}{Decide whether or not to include input data with results.}
}
\value{
results List of results and input data/parameters
}
\description{
Function takes in node information in the form of a vector or matrix
and smooths/propagates the information across network of interacting
nodes represeted as an adjaceny matrix.
}
\examples{
\dontrun{
# Generate random undirected network
genes = paste0("g",1:150)
net = data.frame(from = sample(genes, 50, TRUE), to = sample(genes, 10, TRUE), stringsAsFactors = F)
net = net[net$from != net$to,] # remove self loops
# sort interacting nodes alphabetically and remove duplicate interactions
for(i in 1:nrow(net)){net[i,] = sort(net[i,])}
net = net[!duplicated(apply(net,1,function(s)paste(s,collapse = "_"))),]
# create igraph object
library(igraph)
net = graph.data.frame(net, directed = F)
# create adjacency matrix
net.adj = as.matrix(get.adjacency(net))
# weight edges by degree of connected nodes
W = degreeNormalize(net.adj)
# Generate random mutation data for single sample
Y = sample(c(0,1), ncol(W), replace = T, prob = c(.8,.2))
# smooth data over network
res1 = netPropagate(mutData = Y, adj.mat = W, alpha = .7)
myLayout = layout.fruchterman.reingold(net)
# plot input data
plot(net, vertex.label.color = "black", 
 vertex.color = unlist(lapply(Y, function(x)rgb(colorRamp(c("white","red"))(x), 
   maxColorValue = 255))), 
 vertex.label.cex = .7, layout = myLayout, vertex.label = NULL, main = paste("input"))
# plot smoothed data
plot(net, vertex.label.color = "black", 
 vertex.color = unlist(lapply(res1$result, function(x)rgb(colorRamp(c("white","red"))(x), 
   maxColorValue = 255))),
 vertex.label.cex = .7, layout = myLayout, main = paste("step",res1$steps))
}

}
